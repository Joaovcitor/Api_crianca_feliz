generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "debian-openssl-3.0.x"]
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------
// --- Models
// -------------------

model Caregiver {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  cpf               String    @unique @db.VarChar(255)
  rg                String?   @db.VarChar(255)
  address           String?   @db.VarChar(255)
  district          String?   @db.VarChar(255)
  contact           String?   @db.VarChar(255)
  born              DateTime? @db.Timestamptz(6)
  pregnant          Boolean?
  isPending         Boolean?  @default(true)
  supervisorId      Int?
  visitadorId       Int?
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @db.Timestamptz(6)
  weekPregnant      Int?      @default(0) @map("week_pregnant")

  supervisor        User?     @relation("SupervisorCaregivers", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visitor           User?     @relation("VisitorCaregivers", fields: [visitadorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  children          Child[]
  visitPlans        PlanoDeVisitas[]
  visitTables       TabelaDeVisitas[]
  geoLocatedVisits  VisitaPorGeolocalizacao[]

  @@map("Caregivers")
}

model Chamado {
  id                 Int           @id @default(autoincrement())
  type               ChamadoType   @map("tipo_do_chamado")
  description        String        @map("descricao")
  userId             Int
  recipientId        Int?          @map("userIdDestinatario")

  recipient          User?         @relation("ChamadosRecebidos", fields: [recipientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  author             User          @relation("ChamadosFeitos", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Chamados")
}

model Child {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(255)
  nis               String?           @db.VarChar(255)
  born              DateTime?         @db.Timestamptz(6)
  visitorId         Int?              @map("visitadorId")
  caregiverId       Int?
  createdAt         DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime          @updatedAt @db.Timestamptz(6)
  isPending         Boolean?          @default(true)
  gender            ChildGender?      @map("sexo")
  isBpc             Boolean?          @default(true)

  caregiver         Caregiver?        @relation(fields: [caregiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visitor           User?             @relation(fields: [visitorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

 
  visitPlans        PlanoDeVisitas[]
  visitTables       TabelaDeVisitas[]
  geoLocatedVisits  VisitaPorGeolocalizacao[]
  formularios       Formulario[]

  @@map("Child")
}

model Falta {
  id                      Int       @id @default(autoincrement())
  reason                  String    @map("motivo_da_falta")
  occurrenceDate          DateTime? @map("quando_ocorreu_a_falta") @db.Date
  isInvalidated           Boolean?  @default(false) @map("falta_invalidada")
  invalidationRequest     String?   @map("pedir_para_invalidar_falta")
  createdAt               DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime  @updatedAt @db.Timestamptz(6)
  userId                  Int
  recorderId              Int       @map("registradorId")
  invalidationRequestAccepted Boolean?  @default(false) @map("pedido_para_invalidar_aceito")
  justificationReason     String?   @map("motivo_falta_justificada")
  isJustified             Boolean?  @default(false) @map("falta_justificada")

  recorder                User      @relation("FaltasRegistradas", fields: [recorderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                    User      @relation("FaltasUsuario", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Faltas")
}

model Notificacao {
  id             Int              @id @default(autoincrement())
  type           NotificacaoType  @map("notificacao_tipo")
  description    String           @map("descricao")
  userId      Int             @map("userId")
  
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(6)

  user User @relation("NotificacoesDoUsuario", fields: [userId], references: [id])

  @@map("Notificacoes")
}

model PlanoDeVisitas {
  id                         Int                            @id @default(autoincrement())
  objective                  String                         @map("objetivo")
  etapa1                     String
  etapa2                     String
  etapa3                     String
  observation                String?                        @map("observacao")
  realizationDay             DateTime?                      @map("dia_de_visita_realizado") @db.Timestamptz(6)
  scheduledDay               DateTime                       @map("dia_a_ser_realizada_a_visita") @db.Timestamptz(6)
  objectiveDifficulty        PlanoVisitaDificuldade         @map("grau_de_dificuldade_objetivo")
  realizationStatus          PlanoVisitaRealizacao?         @map("conseguiu_fazer")
  realizedWithDifficulty     Boolean?                       @default(false) @map("fez_com_dificuldade")
  visitorId                  Int?                           @map("visitadorId")
  childId                    Int?
  createdAt                  DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime                       @updatedAt @db.Timestamptz(6)
  caregiverId                Int?                           @map("CaregiverId")

  caregiver                  Caregiver?                     @relation(fields: [caregiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child                      Child?                         @relation(fields: [childId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visitor                    User?                          @relation(fields: [visitorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  geoLocatedVisits           VisitaPorGeolocalizacao[]

  @@map("PlanosDeVisitas")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model TabelaDeVisitas {
  id           Int                   @id @default(autoincrement())
  dateOfVisit  DateTime?
  childVisited String                @db.VarChar(255)
  dayOfVisit   TabelaVisitaDia
  period       TabelaVisitaPeriodo
  visitorId    Int?                  @map("visitadorId")
  childId      Int?
  createdAt    DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime              @updatedAt @db.Timestamptz(6)
  caregiverId  Int?

  caregiver    Caregiver?            @relation(fields: [caregiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child        Child?                @relation(fields: [childId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visitor      User?                 @relation(fields: [visitorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("TabelasDeVisitas")
}

model User {
  id                        Int        @id @default(autoincrement())
  name                      String     @db.VarChar(255)
  password                  String     @db.VarChar(255)
  role                      UserRole
  cpf                       String     @unique @db.VarChar(255)
  email                     String     @unique @db.VarChar(255)
  territorio                String     @db.VarChar(255)
  cras                      String?    @db.VarChar(255)
  isPending                 Boolean?   @default(true)
  isActive                  Boolean?   @default(false)
  restrictionMakePlain      Boolean?   @default(false)
  restrictLoginVisitPending Boolean?   @default(false)
  earlyAccess               Boolean?   @default(false) @map("early_access")
  supervisorId              Int?
  coordenadorId             Int?
  createdAt                 DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime   @updatedAt @db.Timestamptz(6)

  // Self-relations for hierarchy
  supervisor                User?      @relation("Supervision", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervised                User[]     @relation("Supervision")
  coordinator               User?      @relation("Coordination", fields: [coordenadorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  coordinated               User[]     @relation("Coordination")

  // Relations to other models
  supervisedCaregivers      Caregiver[] @relation("SupervisorCaregivers")
  visitorCaregivers         Caregiver[] @relation("VisitorCaregivers")

  chamadosFeitos            Chamado[] @relation("ChamadosFeitos")
  chamadosRecebidos         Chamado[] @relation("ChamadosRecebidos")

  children                  Child[]
  
   formularios   Formulario[]

  faltasRegistradas         Falta[]   @relation("FaltasRegistradas")
  faltasUsuario             Falta[]   @relation("FaltasUsuario")

  notificacoes   Notificacao[] @relation("NotificacoesDoUsuario")
  

  planosDeVisitas           PlanoDeVisitas[]
  tabelasDeVisitas          TabelaDeVisitas[]
  visitasPorGeolocalizacaos VisitaPorGeolocalizacao[]

  @@map("Users")
}

model VisitaPorGeolocalizacao {
  id                       Int        @id @default(autoincrement())
  latitude                 Float?
  longitude                Float?
  startTime                DateTime?  @map("hora_inicio") @db.Timestamptz(6)
  endTime                  DateTime?  @map("hora_fim") @db.Timestamptz(6)
  finalLatitude            Float?     @map("latitude_final")
  finalLongitude           Float?     @map("longitude_final")
  isFinished               Boolean?   @default(false) @map("finalizou")
  isFakeVisit              Boolean?   @default(false) @map("visita_mentirosa")
  isValidationPending      Boolean?   @default(true) @map("pendente_de_validacao")
  nonRealizationReason     String?    @map("motivo_da_nao_realizacao") @db.VarChar(255)
  invalidationReason       String?    @map("motivo_da_invalidacao") @db.VarChar(255)
  isBeneficiaryHome        Boolean?   @default(true) @map("beneficiario_em_casa")
  beneficiaryLatitude      Float?     @map("latitude_beneficiario")
  beneficiaryLongitude     Float?     @map("longitude_beneficiario")
  scheduledDate            DateTime   @map("data_que_vai_ser_realizada") @db.Timestamptz(6)
  isScheduledVisitFinished Boolean?   @default(false) @map("visita_marcada_finalizada")
  isVisitInProgress        Boolean?   @default(false) @map("visita_em_andamento")
  visitorId                Int?       @map("visitadorId")
  childId                  Int?
  planId                   Int?       @map("planoId")
  createdAt                DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime   @updatedAt @db.Timestamptz(6)
  caregiverId              Int?

  caregiver                Caregiver?      @relation(fields: [caregiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child                    Child?           @relation(fields: [childId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visitPlan                PlanoDeVisitas?  @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visitor                  User?            @relation(fields: [visitorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("VisitasPorGeolocalizacaos")
}



model Formulario {
  id          Int      @id @default(autoincrement())
  tipo        TiposFormularios 
  etapa       Int   
  childId     Int
  visitorId   Int      @map("visitadorId")
  respostas   Json
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  child       Child    @relation(fields: [childId], references: [id], onDelete: Cascade) // Usar Cascade pode ser útil aqui
  visitor     User     @relation(fields: [visitorId], references: [id], onDelete: NoAction)

  @@map("formularios")
}


// -------------------
// --- Enums
// -------------------
enum TiposFormularios {
  tipo5
  tipo7
}
enum ChamadoType {
  bug
  duvida
  edicao
  outros

  @@map("enum_Chamados_tipo_do_chamado")
}

enum ChildGender {
  Masculino
  Feminino

  @@map("enum_Child_sexo")
}

enum EtapaAnswer {
  Consegue_fazer_sozinho @map("Consegue fazer sozinho")
  Consegue_fazer_com_Ajuda @map("Consegue fazer com Ajuda")
  Ainda_n_o_consegue_fazer @map("Ainda não consegue fazer")
}

enum NotificacaoType {
  Evento @map("Evento")
  Reuniao @map("Reunião")
  Falta @map("Falta")
  Outras @map("Outras")

  @@map("enum_Notificacoes_notificacao_tipo")
}

enum PlanoVisitaRealizacao {
  Com_ajuda @map("Com ajuda")
  Sem_ajuda @map("Sem ajuda")
  N_o_quis_fazer @map("Não quis fazer")

  @@map("enum_PlanosDeVisitas_conseguiu_fazer")
}

enum PlanoVisitaDificuldade {
  Facil @map("Fácil")
  Media @map("Média")
  Dificil @map("Difícil")

  @@map("enum_PlanosDeVisitas_grau_de_dificuldade_objetivo")
}

enum TabelaVisitaDia {
  Segunda @map("Segunda")
  Terca @map("Terça")
  Quarta @map("Quarta")
  Quinta @map("Quinta")
  Sexta @map("Sexta")

  @@map("enum_TabelasDeVisitas_dayOfVisit")
}

enum TabelaVisitaPeriodo {
  Manha @map("Manhã")
  Tarde @map("Tarde")

  @@map("enum_TabelasDeVisitas_period")
}

enum UserRole {
  visitador
  supervisor
  coordenador

  @@map("enum_Users_role")
}